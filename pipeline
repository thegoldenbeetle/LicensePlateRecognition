import cv2
import torch
import math
from number_recognition.number_recognition import MobileNetCarNumberRecognizer
from collections import Counter


def main():
    second = 0
    number_plates = []
    while True:
        vs.set(cv2.CAP_PROP_POS_MSEC, second*500)
        second += 1
        ret, frame = vs.read()
        car_coords = car_detector(frame)
        crops_car = car_coords.crop(save=False)  
        # cv2.imshow('image', frame)
        # cv2.waitKey(2)
        if len(crops_car)>0:
            for car in crops_car:
                if (car['box'][0]<800) and (car['box'][2]>800) and (car['box'][3]<900):
                    frame_car = frame[
                        math.floor(car['box'][1]):math.ceil(car['box'][3]),
                        math.floor(car['box'][0]):math.ceil(car['box'][2])
                        ]
                    # cv2.imshow('image', frame_car)
                    # cv2.waitKey(2)
                    plate_coords = plate_detector(frame_car)
                    crops_plate = plate_coords.crop(save=False)
                    if len(crops_plate)>0: 
                        # print('plate_detected')
                        box = crops_plate[0]['box']
                        frame_plate = frame_car[
                        math.floor(box[1])-4:math.ceil(box[3])+4, 
                        math.floor(box[0])-4:math.ceil(box[2])+4
                        ]
                        # cv2.imshow('image', frame_plate)
                        # cv2.waitKey(2)
                        number = number_recognizer.recognize_number(frame_plate)
                        # print(number)
                        number_plates.append(number)
                        if car['box'][3]>830:
                            print('final car plate - ', Counter(number_plates).most_common(1)[0][0])
                            print('____________')
                            number_plates = []
                    else:
                        continue
        else:
            continue

if __name__ == "__main__":
    car_detector = torch.hub.load('yolov5/', 'custom', path='yolov5m6.pt', source='local') # Заменить на кастом модель
    car_detector.classes = [2] #car
    plate_detector = torch.hub.load('yolov5/', 'custom', path='plate_detection/best.pt', source='local')
    number_recognizer = MobileNetCarNumberRecognizer("./number_recognition/model.pt")

    vs = cv2.VideoCapture("./test_videos/test.mp4")
    main()
